# Sveltest Testing Documentation

## Essential Setup

```typescript
import { describe, expect, it, vi } from 'vitest';
import { render } from 'vitest-browser-svelte';
import { page } from '@vitest/browser/context';
import { createRawSnippet } from 'svelte';
import { flushSync, untrack } from 'svelte';
```

## Vitest Browser Config

```typescript
export default defineConfig({
  test: {
    projects: [{
      name: 'client',
      environment: 'browser',
      browser: { enabled: true, provider: 'playwright' },
      include: ['src/**/*.svelte.{test,spec}.{js,ts}'],
    }],
  },
});
```

## CRITICAL: Always Use Locators

```typescript
// ❌ NEVER use containers - no auto-retry
const { container } = render(MyComponent);
const button = container.querySelector('button');

// ✅ ALWAYS use locators - auto-retry built-in
render(MyComponent);
const button = page.getByRole('button');
await button.click();
```

## Locator Hierarchy

1. **Semantic**: `page.getByRole('button', { name: 'Submit' })`
2. **Labels**: `page.getByLabel('Email address')`
3. **Text**: `page.getByText('Welcome back')`
4. **Test IDs**: `page.getByTestId('submit-button')`

## Handle Multiple Elements (Strict Mode)

```typescript
// ❌ FAILS: "strict mode violation"
page.getByRole('link', { name: 'Home' });

// ✅ CORRECT: Use .first(), .nth(), .last()
page.getByRole('link', { name: 'Home' }).first();
page.getByRole('listitem').nth(1); // Zero-indexed
```

## Essential Patterns

### Button Component
```typescript
it('should handle click events', async () => {
  const click_handler = vi.fn();
  render(Button, { onclick: click_handler, children: 'Click me' });
  
  await page.getByRole('button', { name: 'Click me' }).click();
  expect(click_handler).toHaveBeenCalledOnce();
});
```

### Form Input
```typescript
it('should handle user input', async () => {
  render(Input, { type: 'email', label: 'Email' });
  
  const input = page.getByLabelText('Email');
  await input.fill('user@example.com');
  
  await expect.element(input).toHaveValue('user@example.com');
});
```

## Svelte 5 Runes Testing

```typescript
// ✅ $state - direct testing
let count = $state(0);
expect(count).toBe(0);

// ✅ $derived - ALWAYS use untrack()
let doubled = $derived(count * 2);
expect(untrack(() => doubled)).toBe(0);

count = 5;
flushSync(); // Force update
expect(untrack(() => doubled)).toBe(10);
```

## Assertions (Always Await)

```typescript
// ✅ Element assertions
await expect.element(page.getByText('Success')).toBeInTheDocument();
await expect.element(page.getByRole('button')).toBeDisabled();
await expect.element(page.getByRole('textbox')).toHaveValue('test');

// ✅ Regular assertions
expect(click_handler).toHaveBeenCalledOnce();
expect(untrack(() => derived_value)).toBe(expected);
```

## Form Validation Lifecycle

```typescript
// ✅ CORRECT: Forms start valid → validate → invalid → fix → valid
expect(untrack(() => form_state.is_form_valid())).toBe(true); // Initially
form_state.validate_all_fields();
expect(untrack(() => form_state.is_form_valid())).toBe(false); // Invalid
form_state.update_field('email', 'valid@example.com');
expect(untrack(() => form_state.is_form_valid())).toBe(true); // Fixed
```

## Common Gotchas & Solutions

### "strict mode violation"
```typescript
// ❌ Multiple elements match
page.getByRole('link', { name: 'Home' });
// ✅ Use .first()
page.getByRole('link', { name: 'Home' }).first();
```

### Role Confusion
```typescript
// ❌ Input role doesn't exist
page.getByRole('input', { name: 'Email' });
// ✅ Use textbox for inputs
page.getByRole('textbox', { name: 'Email' });
```

### SvelteKit Form Hangs
```typescript
// ❌ Can hang with SvelteKit enhance
await submit_button.click();
// ✅ Test state directly or use force
await submit_button.click({ force: true });
```

### Animation Issues
```typescript
// ✅ Use force for animated elements
await page.getByRole('button').click({ force: true });
```

## Anti-Patterns to Avoid

- ❌ Never use `const { container } = render()`
- ❌ Don't test SVG path data: `M9 12l2 2 4-4...`
- ❌ Don't ignore strict mode violations
- ❌ Don't click SvelteKit form submits without force
- ❌ Don't access `$derived` without `untrack()`

## Quick Reference Links

- **Detailed Guide**: [llms-medium.txt](llms-medium.txt)
- **Complete API**: [llms-api.txt](llms-api.txt)
- **GitHub**: [spences10/sveltest](https://github.com/spences10/sveltest)