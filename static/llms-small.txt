# Sveltest Testing Documentation

## Essential Setup

```typescript
import { describe, expect, it, vi } from 'vitest';
import { render } from 'vitest-browser-svelte';
import { page } from '@vitest/browser/context';
import { createRawSnippet } from 'svelte';
import { flushSync, untrack } from 'svelte';
```

### Vitest Browser Config

```typescript
// vite.config.ts
export default defineConfig({
  test: {
    environment: 'browser',
    testTimeout: 2000,
    browser: {
      enabled: true,
      provider: 'playwright',
      instances: [{ browser: 'chromium' }],
    },
  },
});
```

## Core Testing Pattern

```typescript
describe('MyComponent', () => {
  it('should render and handle interactions', async () => {
    render(MyComponent, { variant: 'primary' });
    
    const button = page.getByRole('button', { name: 'Click me' });
    await expect.element(button).toBeInTheDocument();
    await button.click();
  });
});
```

## Critical: Always Use Locators

```typescript
// ❌ NEVER use containers - no auto-retry
const { container } = render(MyComponent);
const button = container.querySelector('button');

// ✅ ALWAYS use locators - auto-retry built-in
render(MyComponent);
const button = page.getByRole('button');
await button.click();
```

## Handle Multiple Elements (Strict Mode)

```typescript
// ❌ FAILS: "strict mode violation" if multiple elements
page.getByRole('link', { name: 'Home' });

// ✅ CORRECT: Use .first(), .nth(), .last()
page.getByRole('link', { name: 'Home' }).first();
page.getByRole('button').nth(1); // Zero-indexed
```

## Essential Form Testing

```typescript
it('should handle form validation', async () => {
  render(LoginForm);
  
  const email = page.getByLabelText('Email');
  const submit = page.getByRole('button', { name: 'Submit' });
  
  // Test validation lifecycle: valid → invalid → valid
  await email.fill('invalid-email');
  await submit.click();
  
  await expect.element(page.getByText('Invalid email')).toBeInTheDocument();
  
  await email.fill('valid@example.com');
  await expect.element(page.getByText('Invalid email')).not.toBeInTheDocument();
});
```

⚠️ **Form Warning**: Don't click SvelteKit form submits - test state directly!

## Svelte 5 Runes Testing

```typescript
it('should handle reactive state', () => {
  let count = $state(0);
  let doubled = $derived(count * 2);
  
  // ✅ CRITICAL: Always use untrack() for $derived
  expect(untrack(() => doubled)).toBe(0);
  
  count = 5;
  flushSync();
  expect(untrack(() => doubled)).toBe(10);
});
```

## Common Gotchas & Fixes

**"strict mode violation"**
```typescript
// Use .first(), .nth(), .last()
page.getByRole('link').first();
```

**Role confusion**
```typescript
// ❌ Wrong: Input role doesn't exist
page.getByRole('input');
// ✅ Correct: Use textbox
page.getByRole('textbox');
```

**Animation issues**
```typescript
await button.click({ force: true });
```

**Mock function signatures**
```typescript
// ❌ Wrong signature
vi.mock('$lib/utils', () => ({ fn: vi.fn() }));
// ✅ Correct signature
vi.mock('$lib/utils', () => ({ fn: vi.fn((param: string) => 'result') }));
```

## Essential Assertions

```typescript
// Always await element assertions
await expect.element(page.getByText('Success')).toBeInTheDocument();
await expect.element(page.getByRole('button')).toBeEnabled();
await expect.element(page.getByRole('textbox')).toHaveValue('test');
await expect.element(page.getByRole('button')).toHaveClass('btn-primary');
```

## Quick Component Test

```typescript
// Create src/lib/components/my-button.svelte
<script lang="ts">
  let { variant = 'primary', onclick, children } = $props();
</script>
<button class="btn btn-{variant}" {onclick}>{@render children()}</button>

// Test: src/lib/components/my-button.svelte.test.ts
describe('MyButton', () => {
  it('should render with variant', async () => {
    const children = createRawSnippet(() => ({
      render: () => `<span>Click me</span>`
    }));
    
    render(MyButton, { variant: 'secondary', children });
    
    const button = page.getByRole('button', { name: 'Click me' });
    await expect.element(button).toHaveClass('btn-secondary');
  });
});
```

## Anti-Patterns to Avoid

- ❌ Never use containers: `const { container } = render()`
- ❌ Don't ignore strict mode violations
- ❌ Don't test SVG paths: `expect(body).toContain('M9 12l2...')`
- ❌ Don't assume element roles - verify with dev tools
- ❌ Don't click SvelteKit form submits

## Further Reading

- **Complete Guide**: llms-medium.txt (detailed patterns)
- **Full API**: llms-api.txt (comprehensive reference)
- **GitHub**: https://github.com/spences10/sveltest