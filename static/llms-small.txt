# Sveltest Testing Documentation

Ultra-compressed essentials for small context windows.

## Quick Setup

```typescript
import { describe, expect, it, vi } from 'vitest';
import { render } from 'vitest-browser-svelte';
import { page } from '@vitest/browser/context';
import { createRawSnippet } from 'svelte';
```

## Essential Testing Pattern

```typescript
describe('Component', () => {
  it('should render correctly', async () => {
    render(Component, { variant: 'primary' });
    
    const button = page.getByRole('button', { name: 'Submit' });
    await expect.element(button).toBeInTheDocument();
    await button.click();
  });
});
```

## Locators (ALWAYS Use These)

```typescript
// ✅ Semantic queries (preferred)
page.getByRole('button', { name: 'Submit' });
page.getByRole('textbox', { name: 'Email' });
page.getByLabelText('Password');
page.getByText('Welcome');

// ✅ Multiple elements - MUST specify which one
page.getByRole('link', { name: 'Home' }).first();
page.getByRole('button').nth(1);
page.getByRole('listitem').last();

// ❌ NEVER use containers
const { container } = render(Component); // NO!
```

## Critical Gotchas

### 1. Strict Mode Violations
```typescript
// ❌ FAILS: Multiple elements match
page.getByRole('link', { name: 'Home' });

// ✅ CORRECT: Use .first(), .nth(), .last()
page.getByRole('link', { name: 'Home' }).first();
```

### 2. Form Testing Warnings
```typescript
// ❌ Can hang with SvelteKit forms
await submit_button.click();

// ✅ Test state directly
render(Form, { errors: { email: 'Required' } });
await expect.element(page.getByText('Required')).toBeInTheDocument();
```

### 3. Role Confusion
```typescript
// ❌ WRONG roles
page.getByRole('input'); // doesn't exist
page.getByRole('link'); // when element has role="button"

// ✅ CORRECT roles  
page.getByRole('textbox'); // for inputs
page.getByRole('button'); // check actual role attribute
```

## Basic Assertions

```typescript
// ✅ Always await element assertions
await expect.element(page.getByText('Success')).toBeInTheDocument();
await expect.element(page.getByRole('button')).toBeEnabled();
await expect.element(page.getByRole('textbox')).toHaveValue('test');
await expect.element(page.getByRole('button')).toHaveClass('btn-primary');
```

## Svelte 5 Runes Testing

```typescript
import { flushSync, untrack } from 'svelte';

// ✅ CRITICAL: Always use untrack() for $derived
let count = $state(0);
let doubled = $derived(count * 2);

expect(untrack(() => doubled)).toBe(0);

count = 5;
flushSync();
expect(untrack(() => doubled)).toBe(10);
```

## Complete Component Test Example

```typescript
import { describe, expect, it, vi } from 'vitest';
import { render } from 'vitest-browser-svelte';
import { page } from '@vitest/browser/context';
import { createRawSnippet } from 'svelte';
import Button from './button.svelte';

describe('Button Component', () => {
  it('should handle click events', async () => {
    const click_handler = vi.fn();
    const children = createRawSnippet(() => ({
      render: () => `<span>Click me</span>`,
    }));
    
    render(Button, { onclick: click_handler, children });
    
    const button = page.getByRole('button', { name: 'Click me' });
    await button.click();
    
    expect(click_handler).toHaveBeenCalledOnce();
  });
  
  it('should apply variant styling', async () => {
    render(Button, { variant: 'primary' });
    
    const button = page.getByRole('button');
    await expect.element(button).toHaveClass('btn-primary');
  });
});
```

## Form Testing Pattern

```typescript
it('should handle form input', async () => {
  render(LoginForm);
  
  const email_input = page.getByLabelText('Email');
  const password_input = page.getByLabelText('Password');
  
  await email_input.fill('user@example.com');
  await password_input.fill('password123');
  
  await expect.element(email_input).toHaveValue('user@example.com');
});
```

## Quick Fixes

- **"strict mode violation"**: Use `.first()`, `.nth()`, `.last()`
- **Test hangs**: Avoid clicking SvelteKit form submits
- **"Expected 2 arguments"**: Fix mock function signatures
- **Role not found**: Use `textbox` not `input`, check actual `role` attributes
- **Form initially invalid**: Forms typically start valid, become invalid after validation

## Links to Full Documentation

- **llms-medium.txt**: Detailed patterns and examples
- **llms-api.txt**: Complete API reference
- **Full docs**: [sveltest.com](https://sveltest.com)